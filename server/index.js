import express from 'express';
import cors from 'cors';
import 'dotenv/config';
import OpenAI from 'openai';
import { createClient } from '@supabase/supabase-js';

const app = express();
app.use(cors());
app.use(express.json());

// ‚îÄ‚îÄ‚îÄ OpenAI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// ‚îÄ‚îÄ‚îÄ Supabase ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// ‚îÄ‚îÄ‚îÄ /chat ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.post('/chat', async (req, res) => {
  // BotHelp —à–ª—ë—Ç –æ–±—ä–µ–∫—Ç message; –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ‚Äî –±–µ—Ä—ë–º –∫–∞–∫ –µ—Å—Ç—å
  const { message } = req.body;
  const text =
    typeof message === 'object'
      ? message.text || ''   // –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–æ–ª–µ text –∏–∑ –æ–±—ä–µ–∫—Ç–∞
      : String(message || '');

  if (!text) {
    return res.status(400).json({ error: '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' });
  }

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: text }],
    });

    res.json({ reply: response.choices[0].message.content });
  } catch (err) {
    console.error('OpenAI error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
  }
});

// ‚îÄ‚îÄ‚îÄ server start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));

import TelegramBot from 'node-telegram-bot-api';
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

bot.onText(/^\/start(?:\s+paid)?$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    '–ü—Ä–∏–≤–µ—Ç! –Ø GPT‚Äë–°–û–Æ–ó–ù–ò–ö. –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äì –æ—Ç–≤–µ—á—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.'
  );
});

bot.onText(/^\/upgrade$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–∞—Ä–∏—Ñ–∞–º üëá',
    {
      reply_markup: {
        inline_keyboard: [[{
          text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ',
          url: 'https://t.me/<–¢–í–û–ô_BOTHELP_BOT>?start=upgrade'
        }]]
      }
    }
  );
});

bot.on('message', async (msg) => {
  if (!msg.text || msg.text.startsWith('/')) return;   // –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
  try {
    const gpt = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: msg.text }]
    });
    bot.sendMessage(msg.chat.id, gpt.choices[0].message.content);
  } catch (e) {
    console.error(e);
    bot.sendMessage(msg.chat.id, '–£–ø—Å, —á—Ç–æ‚Äë—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram fast chat ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
import TelegramBot from 'node-telegram-bot-api';
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

bot.onText(/^\/start(?:\s+paid)?$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    '–ü—Ä–∏–≤–µ—Ç! –Ø GPT‚Äë–°–û–Æ–ó–ù–ò–ö. –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äì –æ—Ç–≤–µ—á—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.'
  );
});

bot.onText(/^\/upgrade$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–∞—Ä–∏—Ñ–∞–º üëá',
    {
      reply_markup: {
        inline_keyboard: [[{
          text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ',
          url: 'https://t.me/<–¢–í–û–ô_BOTHELP_BOT>?start=upgrade'
        }]]
      }
    }
  );
});

// –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí GPT
bot.on('message', async (msg) => {
  if (!msg.text || msg.text.startsWith('/')) return;   // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  try {
    const gpt = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: msg.text }]
    });
    bot.sendMessage(msg.chat.id, gpt.choices[0].message.content);
  } catch (e) {
    console.error(e);
    bot.sendMessage(msg.chat.id, '–£–ø—Å, —á—Ç–æ‚Äë—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

